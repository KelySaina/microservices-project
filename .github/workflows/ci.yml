name: CI/CD

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: kelysaina

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine changed services
        id: changes
        run: |
          # Make sure we have at least 2 commits
          git fetch --depth=2

          # Determine the previous commit
          PREV_COMMIT=${{ github.event.before }}
          if [ -z "$PREV_COMMIT" ] || [ "$PREV_COMMIT" = "0000000000000000000000000000000000000000" ]; then
            PREV_COMMIT=$(git rev-parse HEAD~1)
          fi

          # Get changed services
          CHANGED_SERVICES=$(git diff --name-only "$PREV_COMMIT" HEAD | grep -E '^services/' | cut -d/ -f2 | sort -u)
          echo "Changed services: $CHANGED_SERVICES"
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_OUTPUT

      - name: Build and Push changed images
        run: |
          for service in ${{ steps.changes.outputs.CHANGED_SERVICES }}; do
            echo "Building and pushing $service"
            docker build -t $REGISTRY/$IMAGE_OWNER/$service:latest ./services/$service
            docker push $REGISTRY/$IMAGE_OWNER/$service:latest
          done

      - name: Build and deploy gateway
        run: |
          echo "Building and pushing gateway"
          docker build -t $REGISTRY/$IMAGE_OWNER/gateway:latest ./gateway
          docker push $REGISTRY/$IMAGE_OWNER/gateway:latest

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
          npm test --prefix auth-service || true
          npm test --prefix order-service || true
          pytest product-service/tests || true

  deploy:
    runs-on: self-hosted # your master node runner
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy Namespace
        run: |
          kubectl delete namespace microservices --grace-period=0 --force
          kubectl apply -f k8s/namespace.yaml
          kubectl get namespaces

      - name: Deploy Services
        run: kubectl apply -n microservices -f k8s/
